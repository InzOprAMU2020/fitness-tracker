// <auto-generated />
using System;
using FitnessTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FitnessTracker.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20201202222652_Bonjour")]
    partial class Bonjour
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("FitnessTracker.Models.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdGoalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdGoalId");

                    b.ToTable("Coach");
                });

            modelBuilder.Entity("FitnessTracker.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Czas")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Dystans")
                        .HasColumnType("int");

                    b.Property<int?>("IdGoalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Obciazenie")
                        .HasColumnType("int");

                    b.Property<int?>("Powtorzenia")
                        .HasColumnType("int");

                    b.Property<int?>("Serie")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdGoalId");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("FitnessTracker.Models.ExerciseTraining", b =>
                {
                    b.Property<int>("IdExercise")
                        .HasColumnType("int");

                    b.Property<int>("IdTraining")
                        .HasColumnType("int");

                    b.HasKey("IdExercise", "IdTraining");

                    b.HasIndex("IdTraining");

                    b.ToTable("ExerciseTraining");
                });

            modelBuilder.Entity("FitnessTracker.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Goal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Redukcja tkanki tłuszczowej"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Przybranie masy mięśniowej"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rekompozycja sylwetki"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.History", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<int>("IdExercise")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.HasKey("IdUser", "IdExercise", "Date");

                    b.HasIndex("IdExercise");

                    b.ToTable("History");
                });

            modelBuilder.Entity("FitnessTracker.Models.HistoryStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Czas")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Dystans")
                        .HasColumnType("int");

                    b.Property<DateTime?>("IdHistoryDate")
                        .HasColumnType("Date");

                    b.Property<int?>("IdHistoryIdExercise")
                        .HasColumnType("int");

                    b.Property<int?>("IdHistoryIdUser")
                        .HasColumnType("int");

                    b.Property<int?>("Obciazenie")
                        .HasColumnType("int");

                    b.Property<int?>("Powtorzenia")
                        .HasColumnType("int");

                    b.Property<int?>("Serie")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdHistoryIdUser", "IdHistoryIdExercise", "IdHistoryDate");

                    b.ToTable("HistoryStats");
                });

            modelBuilder.Entity("FitnessTracker.Models.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("FitnessTracker.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("FitnessTracker.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            GoalId = 2,
                            Name = "Admin Name",
                            PasswordHash = new byte[] { 207, 11, 19, 35, 127, 93, 30, 172, 40, 24, 22, 93, 58, 178, 139, 86, 228, 148, 218, 202, 11, 145, 83, 8, 171, 104, 27, 200, 129, 63, 23, 64, 48, 65, 54, 71, 36, 13, 254, 212, 66, 96, 233, 144, 230, 71, 82, 56, 73, 82, 239, 160, 90, 193, 98, 29, 22, 81, 220, 251, 239, 186, 110, 107 },
                            PasswordSalt = new byte[] { 148, 14, 94, 23, 240, 241, 184, 152, 20, 95, 237, 68, 204, 234, 113, 43, 4, 93, 242, 26, 122, 249, 97, 79, 52, 106, 186, 18, 99, 120, 46, 91, 40, 62, 239, 229, 42, 134, 246, 7, 118, 123, 86, 136, 92, 217, 42, 111, 182, 209, 81, 161, 62, 71, 51, 164, 22, 71, 9, 240, 237, 180, 104, 1, 252, 255, 146, 247, 225, 76, 103, 204, 13, 101, 129, 247, 21, 8, 25, 40, 57, 95, 151, 77, 71, 241, 110, 219, 221, 108, 85, 194, 251, 126, 205, 181, 61, 19, 70, 33, 106, 15, 164, 135, 179, 136, 109, 50, 62, 167, 155, 129, 62, 119, 166, 12, 150, 179, 101, 194, 77, 135, 180, 231, 114, 138, 117, 216 },
                            RoleId = 1,
                            Surname = "Admin Surname"
                        },
                        new
                        {
                            Id = 2,
                            Email = "moderator@gmail.com",
                            GoalId = 3,
                            Name = "Moderator Name",
                            PasswordHash = new byte[] { 207, 11, 19, 35, 127, 93, 30, 172, 40, 24, 22, 93, 58, 178, 139, 86, 228, 148, 218, 202, 11, 145, 83, 8, 171, 104, 27, 200, 129, 63, 23, 64, 48, 65, 54, 71, 36, 13, 254, 212, 66, 96, 233, 144, 230, 71, 82, 56, 73, 82, 239, 160, 90, 193, 98, 29, 22, 81, 220, 251, 239, 186, 110, 107 },
                            PasswordSalt = new byte[] { 148, 14, 94, 23, 240, 241, 184, 152, 20, 95, 237, 68, 204, 234, 113, 43, 4, 93, 242, 26, 122, 249, 97, 79, 52, 106, 186, 18, 99, 120, 46, 91, 40, 62, 239, 229, 42, 134, 246, 7, 118, 123, 86, 136, 92, 217, 42, 111, 182, 209, 81, 161, 62, 71, 51, 164, 22, 71, 9, 240, 237, 180, 104, 1, 252, 255, 146, 247, 225, 76, 103, 204, 13, 101, 129, 247, 21, 8, 25, 40, 57, 95, 151, 77, 71, 241, 110, 219, 221, 108, 85, 194, 251, 126, 205, 181, 61, 19, 70, 33, 106, 15, 164, 135, 179, 136, 109, 50, 62, 167, 155, 129, 62, 119, 166, 12, 150, 179, 101, 194, 77, 135, 180, 231, 114, 138, 117, 216 },
                            RoleId = 2,
                            Surname = "Moderator Surname"
                        },
                        new
                        {
                            Id = 3,
                            Email = "user@gmail.com",
                            GoalId = 1,
                            Name = "User Name",
                            PasswordHash = new byte[] { 207, 11, 19, 35, 127, 93, 30, 172, 40, 24, 22, 93, 58, 178, 139, 86, 228, 148, 218, 202, 11, 145, 83, 8, 171, 104, 27, 200, 129, 63, 23, 64, 48, 65, 54, 71, 36, 13, 254, 212, 66, 96, 233, 144, 230, 71, 82, 56, 73, 82, 239, 160, 90, 193, 98, 29, 22, 81, 220, 251, 239, 186, 110, 107 },
                            PasswordSalt = new byte[] { 148, 14, 94, 23, 240, 241, 184, 152, 20, 95, 237, 68, 204, 234, 113, 43, 4, 93, 242, 26, 122, 249, 97, 79, 52, 106, 186, 18, 99, 120, 46, 91, 40, 62, 239, 229, 42, 134, 246, 7, 118, 123, 86, 136, 92, 217, 42, 111, 182, 209, 81, 161, 62, 71, 51, 164, 22, 71, 9, 240, 237, 180, 104, 1, 252, 255, 146, 247, 225, 76, 103, 204, 13, 101, 129, 247, 21, 8, 25, 40, 57, 95, 151, 77, 71, 241, 110, 219, 221, 108, 85, 194, 251, 126, 205, 181, 61, 19, 70, 33, 106, 15, 164, 135, 179, 136, 109, 50, 62, 167, 155, 129, 62, 119, 166, 12, 150, 179, 101, 194, 77, 135, 180, 231, 114, 138, 117, 216 },
                            RoleId = 3,
                            Surname = "User Surname"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.UserTraining", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<int>("IdTraining")
                        .HasColumnType("int");

                    b.Property<bool>("Favourite")
                        .HasColumnType("bit");

                    b.HasKey("IdUser", "IdTraining");

                    b.HasIndex("IdTraining");

                    b.ToTable("UserTraining");
                });

            modelBuilder.Entity("FitnessTracker.Models.Coach", b =>
                {
                    b.HasOne("FitnessTracker.Models.Goal", "IdGoal")
                        .WithMany()
                        .HasForeignKey("IdGoalId");

                    b.Navigation("IdGoal");
                });

            modelBuilder.Entity("FitnessTracker.Models.Exercise", b =>
                {
                    b.HasOne("FitnessTracker.Models.Goal", "IdGoal")
                        .WithMany()
                        .HasForeignKey("IdGoalId");

                    b.Navigation("IdGoal");
                });

            modelBuilder.Entity("FitnessTracker.Models.ExerciseTraining", b =>
                {
                    b.HasOne("FitnessTracker.Models.Exercise", "Exercise")
                        .WithMany("ExerciseTraining")
                        .HasForeignKey("IdExercise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Models.Training", "Training")
                        .WithMany("ExerciseTraining")
                        .HasForeignKey("IdTraining")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("FitnessTracker.Models.History", b =>
                {
                    b.HasOne("FitnessTracker.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("IdExercise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Models.User", "User")
                        .WithMany("IdHistory")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessTracker.Models.HistoryStats", b =>
                {
                    b.HasOne("FitnessTracker.Models.History", "IdHistory")
                        .WithMany()
                        .HasForeignKey("IdHistoryIdUser", "IdHistoryIdExercise", "IdHistoryDate");

                    b.Navigation("IdHistory");
                });

            modelBuilder.Entity("FitnessTracker.Models.RefreshToken", b =>
                {
                    b.HasOne("FitnessTracker.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessTracker.Models.Training", b =>
                {
                    b.HasOne("FitnessTracker.Models.User", null)
                        .WithMany("IdTraining")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FitnessTracker.Models.User", b =>
                {
                    b.HasOne("FitnessTracker.Models.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FitnessTracker.Models.UserTraining", b =>
                {
                    b.HasOne("FitnessTracker.Models.Training", "Training")
                        .WithMany()
                        .HasForeignKey("IdTraining")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Training");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessTracker.Models.Exercise", b =>
                {
                    b.Navigation("ExerciseTraining");
                });

            modelBuilder.Entity("FitnessTracker.Models.Training", b =>
                {
                    b.Navigation("ExerciseTraining");
                });

            modelBuilder.Entity("FitnessTracker.Models.User", b =>
                {
                    b.Navigation("IdHistory");

                    b.Navigation("IdTraining");
                });
#pragma warning restore 612, 618
        }
    }
}
