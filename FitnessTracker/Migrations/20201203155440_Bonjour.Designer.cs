// <auto-generated />
using System;
using FitnessTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FitnessTracker.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20201203155440_Bonjour")]
    partial class Bonjour
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("FitnessTracker.Models.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GoalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.ToTable("Coach");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "coach_1@example.com",
                            GoalId = 1,
                            Name = "CoachName_1",
                            Phone = "123456789",
                            Surname = "CoachSurname_1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "coach_2@example.com",
                            GoalId = 2,
                            Name = "CoachName_2",
                            Phone = "987654321",
                            Surname = "CoachSurname_2"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Czas")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Dystans")
                        .HasColumnType("int");

                    b.Property<int?>("GoalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Obciazenie")
                        .HasColumnType("int");

                    b.Property<int?>("Powtorzenia")
                        .HasColumnType("int");

                    b.Property<int?>("Serie")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("TrainingId");

                    b.ToTable("Exercise");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GoalId = 1,
                            Name = "Exercise_1",
                            Powtorzenia = 1,
                            Serie = 1
                        },
                        new
                        {
                            Id = 2,
                            GoalId = 2,
                            Name = "Exercise_2",
                            Powtorzenia = 2,
                            Serie = 2
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Goal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Redukcja tkanki tłuszczowej"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Przybranie masy mięśniowej"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rekompozycja sylwetki"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ExerciseId", "UserId", "Date")
                        .IsUnique();

                    b.ToTable("History");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExerciseId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExerciseId = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.HistoryStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Czas")
                        .HasColumnType("int");

                    b.Property<int?>("Dystans")
                        .HasColumnType("int");

                    b.Property<DateTime>("HistoryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("HistoryIdExercise")
                        .HasColumnType("int");

                    b.Property<int>("HistoryIdUser")
                        .HasColumnType("int");

                    b.Property<int?>("Obciazenie")
                        .HasColumnType("int");

                    b.Property<int?>("Powtorzenia")
                        .HasColumnType("int");

                    b.Property<int?>("Serie")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("HistoryStats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HistoryDate = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HistoryIdExercise = 1,
                            HistoryIdUser = 1,
                            Powtorzenia = 1,
                            Serie = 1
                        },
                        new
                        {
                            Id = 2,
                            HistoryDate = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HistoryIdExercise = 2,
                            HistoryIdUser = 1,
                            Powtorzenia = 2,
                            Serie = 2
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("FitnessTracker.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Training");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsPublic = true,
                            Name = "Trening_Publiczny_1"
                        },
                        new
                        {
                            Id = 2,
                            IsPublic = false,
                            Name = "Trening_Prywatny_1"
                        },
                        new
                        {
                            Id = 3,
                            IsPublic = false,
                            Name = "Trening_Prywatny_2"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.TrainingExercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseId", "TrainingId");

                    b.ToTable("TrainingExercise");

                    b.HasData(
                        new
                        {
                            ExerciseId = 1,
                            TrainingId = 1
                        },
                        new
                        {
                            ExerciseId = 2,
                            TrainingId = 1
                        },
                        new
                        {
                            ExerciseId = 1,
                            TrainingId = 2
                        },
                        new
                        {
                            ExerciseId = 1,
                            TrainingId = 3
                        },
                        new
                        {
                            ExerciseId = 2,
                            TrainingId = 3
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int?>("GoalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            GoalId = 2,
                            Name = "Admin Name",
                            PasswordHash = new byte[] { 23, 121, 56, 50, 203, 19, 23, 14, 73, 150, 231, 77, 218, 217, 241, 160, 4, 164, 123, 166, 101, 130, 222, 203, 41, 96, 71, 55, 169, 104, 33, 164, 253, 241, 141, 28, 161, 29, 24, 158, 227, 214, 7, 77, 210, 24, 163, 44, 91, 130, 219, 10, 127, 77, 162, 76, 231, 102, 244, 139, 226, 95, 112, 42 },
                            PasswordSalt = new byte[] { 191, 58, 189, 133, 236, 43, 72, 40, 141, 202, 62, 19, 222, 134, 135, 62, 2, 3, 79, 71, 48, 40, 108, 120, 189, 83, 224, 192, 93, 240, 67, 189, 100, 132, 30, 244, 133, 117, 49, 72, 165, 121, 44, 67, 143, 86, 139, 48, 119, 181, 115, 197, 51, 78, 187, 1, 240, 76, 108, 192, 196, 15, 138, 152, 56, 70, 148, 228, 232, 116, 206, 134, 161, 242, 249, 54, 71, 72, 149, 49, 54, 81, 239, 20, 237, 187, 171, 250, 102, 20, 172, 45, 42, 103, 60, 47, 57, 114, 141, 178, 81, 129, 123, 80, 163, 144, 100, 61, 101, 241, 135, 245, 38, 3, 7, 109, 125, 64, 100, 43, 36, 58, 105, 223, 191, 230, 178, 106 },
                            RoleId = 1,
                            Surname = "Admin Surname"
                        },
                        new
                        {
                            Id = 2,
                            Email = "moderator@gmail.com",
                            GoalId = 3,
                            Name = "Moderator Name",
                            PasswordHash = new byte[] { 23, 121, 56, 50, 203, 19, 23, 14, 73, 150, 231, 77, 218, 217, 241, 160, 4, 164, 123, 166, 101, 130, 222, 203, 41, 96, 71, 55, 169, 104, 33, 164, 253, 241, 141, 28, 161, 29, 24, 158, 227, 214, 7, 77, 210, 24, 163, 44, 91, 130, 219, 10, 127, 77, 162, 76, 231, 102, 244, 139, 226, 95, 112, 42 },
                            PasswordSalt = new byte[] { 191, 58, 189, 133, 236, 43, 72, 40, 141, 202, 62, 19, 222, 134, 135, 62, 2, 3, 79, 71, 48, 40, 108, 120, 189, 83, 224, 192, 93, 240, 67, 189, 100, 132, 30, 244, 133, 117, 49, 72, 165, 121, 44, 67, 143, 86, 139, 48, 119, 181, 115, 197, 51, 78, 187, 1, 240, 76, 108, 192, 196, 15, 138, 152, 56, 70, 148, 228, 232, 116, 206, 134, 161, 242, 249, 54, 71, 72, 149, 49, 54, 81, 239, 20, 237, 187, 171, 250, 102, 20, 172, 45, 42, 103, 60, 47, 57, 114, 141, 178, 81, 129, 123, 80, 163, 144, 100, 61, 101, 241, 135, 245, 38, 3, 7, 109, 125, 64, 100, 43, 36, 58, 105, 223, 191, 230, 178, 106 },
                            RoleId = 2,
                            Surname = "Moderator Surname"
                        },
                        new
                        {
                            Id = 3,
                            Email = "user@gmail.com",
                            GoalId = 1,
                            Name = "User Name",
                            PasswordHash = new byte[] { 23, 121, 56, 50, 203, 19, 23, 14, 73, 150, 231, 77, 218, 217, 241, 160, 4, 164, 123, 166, 101, 130, 222, 203, 41, 96, 71, 55, 169, 104, 33, 164, 253, 241, 141, 28, 161, 29, 24, 158, 227, 214, 7, 77, 210, 24, 163, 44, 91, 130, 219, 10, 127, 77, 162, 76, 231, 102, 244, 139, 226, 95, 112, 42 },
                            PasswordSalt = new byte[] { 191, 58, 189, 133, 236, 43, 72, 40, 141, 202, 62, 19, 222, 134, 135, 62, 2, 3, 79, 71, 48, 40, 108, 120, 189, 83, 224, 192, 93, 240, 67, 189, 100, 132, 30, 244, 133, 117, 49, 72, 165, 121, 44, 67, 143, 86, 139, 48, 119, 181, 115, 197, 51, 78, 187, 1, 240, 76, 108, 192, 196, 15, 138, 152, 56, 70, 148, 228, 232, 116, 206, 134, 161, 242, 249, 54, 71, 72, 149, 49, 54, 81, 239, 20, 237, 187, 171, 250, 102, 20, 172, 45, 42, 103, 60, 47, 57, 114, 141, 178, 81, 129, 123, 80, 163, 144, 100, 61, 101, 241, 135, 245, 38, 3, 7, 109, 125, 64, 100, 43, 36, 58, 105, 223, 191, 230, 178, 106 },
                            RoleId = 3,
                            Surname = "User Surname"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.UserTraining", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.Property<bool>("Favourite")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("UserTraining");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            TrainingId = 1,
                            Favourite = false
                        },
                        new
                        {
                            UserId = 1,
                            TrainingId = 2,
                            Favourite = false
                        },
                        new
                        {
                            UserId = 1,
                            TrainingId = 3,
                            Favourite = true
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.Coach", b =>
                {
                    b.HasOne("FitnessTracker.Models.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("FitnessTracker.Models.Exercise", b =>
                {
                    b.HasOne("FitnessTracker.Models.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId");

                    b.HasOne("FitnessTracker.Models.Training", null)
                        .WithMany("Exercises")
                        .HasForeignKey("TrainingId");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("FitnessTracker.Models.History", b =>
                {
                    b.HasOne("FitnessTracker.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Models.User", null)
                        .WithMany("History")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("FitnessTracker.Models.HistoryStats", b =>
                {
                    b.HasOne("FitnessTracker.Models.History", null)
                        .WithMany("HistoryStats")
                        .HasForeignKey("HistoryId");
                });

            modelBuilder.Entity("FitnessTracker.Models.RefreshToken", b =>
                {
                    b.HasOne("FitnessTracker.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessTracker.Models.TrainingExercise", b =>
                {
                    b.HasOne("FitnessTracker.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("FitnessTracker.Models.User", b =>
                {
                    b.HasOne("FitnessTracker.Models.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId");

                    b.HasOne("FitnessTracker.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FitnessTracker.Models.UserTraining", b =>
                {
                    b.HasOne("FitnessTracker.Models.Training", "Training")
                        .WithMany()
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Models.User", null)
                        .WithMany("UserTraining")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Training");
                });

            modelBuilder.Entity("FitnessTracker.Models.History", b =>
                {
                    b.Navigation("HistoryStats");
                });

            modelBuilder.Entity("FitnessTracker.Models.Training", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("FitnessTracker.Models.User", b =>
                {
                    b.Navigation("History");

                    b.Navigation("UserTraining");
                });
#pragma warning restore 612, 618
        }
    }
}
