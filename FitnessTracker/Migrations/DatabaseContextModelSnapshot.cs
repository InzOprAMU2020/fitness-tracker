// <auto-generated />
using System;
using FitnessTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FitnessTracker.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("FitnessTracker.Models.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GoalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.ToTable("Coach");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "coach_1@example.com",
                            GoalId = 1,
                            Name = "CoachName_1",
                            Phone = "123456789",
                            Surname = "CoachSurname_1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "coach_2@example.com",
                            GoalId = 2,
                            Name = "CoachName_2",
                            Phone = "987654321",
                            Surname = "CoachSurname_2"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Czas")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Dystans")
                        .HasColumnType("int");

                    b.Property<int?>("GoalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Obciazenie")
                        .HasColumnType("int");

                    b.Property<int?>("Powtorzenia")
                        .HasColumnType("int");

                    b.Property<int?>("Serie")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.ToTable("Exercise");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GoalId = 1,
                            Name = "Przysiad ze sztangą",
                            Powtorzenia = 8,
                            Serie = 4
                        },
                        new
                        {
                            Id = 2,
                            GoalId = 3,
                            Name = "Wykroki ze sztangielkami",
                            Powtorzenia = 8,
                            Serie = 4
                        },
                        new
                        {
                            Id = 3,
                            GoalId = 3,
                            Name = "Przysiad w szerokim rozkroku",
                            Powtorzenia = 8,
                            Serie = 4
                        },
                        new
                        {
                            Id = 4,
                            GoalId = 3,
                            Name = "Wyciskanie sztangielek w pozycji leżącej",
                            Powtorzenia = 12,
                            Serie = 3
                        },
                        new
                        {
                            Id = 5,
                            GoalId = 3,
                            Name = "Brzuszki z nogami uniesionymi",
                            Powtorzenia = 25,
                            Serie = 3
                        },
                        new
                        {
                            Id = 6,
                            GoalId = 3,
                            Name = "Brzuszki skośne",
                            Powtorzenia = 25,
                            Serie = 3
                        },
                        new
                        {
                            Id = 7,
                            Czas = 30,
                            GoalId = 3,
                            Name = "Plank",
                            Serie = 3
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.ExerciseHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ExerciseId", "UserId", "Date")
                        .IsUnique();

                    b.ToTable("ExerciseHistory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExerciseId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExerciseId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExerciseId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2020, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExerciseId = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.ExerciseHistoryStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Czas")
                        .HasColumnType("int");

                    b.Property<int?>("Dystans")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseHistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("Obciazenie")
                        .HasColumnType("int");

                    b.Property<int?>("Powtorzenia")
                        .HasColumnType("int");

                    b.Property<int?>("Serie")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseHistoryId");

                    b.ToTable("ExerciseHistoryStats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExerciseHistoryId = 1,
                            Powtorzenia = 1,
                            Serie = 1
                        },
                        new
                        {
                            Id = 2,
                            ExerciseHistoryId = 1,
                            Powtorzenia = 4,
                            Serie = 2
                        },
                        new
                        {
                            Id = 3,
                            ExerciseHistoryId = 1,
                            Powtorzenia = 6,
                            Serie = 3
                        },
                        new
                        {
                            Id = 4,
                            ExerciseHistoryId = 2,
                            Powtorzenia = 3,
                            Serie = 1
                        },
                        new
                        {
                            Id = 5,
                            ExerciseHistoryId = 2,
                            Powtorzenia = 6,
                            Serie = 2
                        },
                        new
                        {
                            Id = 6,
                            ExerciseHistoryId = 2,
                            Powtorzenia = 8,
                            Serie = 3
                        },
                        new
                        {
                            Id = 7,
                            ExerciseHistoryId = 3,
                            Powtorzenia = 9,
                            Serie = 7
                        },
                        new
                        {
                            Id = 8,
                            ExerciseHistoryId = 3,
                            Powtorzenia = 2,
                            Serie = 2
                        },
                        new
                        {
                            Id = 9,
                            ExerciseHistoryId = 4,
                            Powtorzenia = 1,
                            Serie = 8
                        },
                        new
                        {
                            Id = 10,
                            ExerciseHistoryId = 4,
                            Powtorzenia = 5,
                            Serie = 4
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Goal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Redukcja tkanki tłuszczowej"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Przybranie masy mięśniowej"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rekompozycja sylwetki"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("FitnessTracker.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Training");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsPublic = true,
                            Name = "Trening_Publiczny_1"
                        },
                        new
                        {
                            Id = 2,
                            IsPublic = false,
                            Name = "Trening_Prywatny_1"
                        },
                        new
                        {
                            Id = 3,
                            IsPublic = false,
                            Name = "Trening_Prywatny_2"
                        },
                        new
                        {
                            Id = 4,
                            IsPublic = true,
                            Name = "Trening_Publiczny_2"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.TrainingExercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingExercise");

                    b.HasData(
                        new
                        {
                            ExerciseId = 1,
                            TrainingId = 1
                        },
                        new
                        {
                            ExerciseId = 2,
                            TrainingId = 1
                        },
                        new
                        {
                            ExerciseId = 3,
                            TrainingId = 1
                        },
                        new
                        {
                            ExerciseId = 4,
                            TrainingId = 1
                        },
                        new
                        {
                            ExerciseId = 1,
                            TrainingId = 2
                        },
                        new
                        {
                            ExerciseId = 5,
                            TrainingId = 2
                        },
                        new
                        {
                            ExerciseId = 6,
                            TrainingId = 2
                        },
                        new
                        {
                            ExerciseId = 1,
                            TrainingId = 3
                        },
                        new
                        {
                            ExerciseId = 2,
                            TrainingId = 3
                        },
                        new
                        {
                            ExerciseId = 6,
                            TrainingId = 3
                        },
                        new
                        {
                            ExerciseId = 7,
                            TrainingId = 3
                        },
                        new
                        {
                            ExerciseId = 4,
                            TrainingId = 4
                        },
                        new
                        {
                            ExerciseId = 3,
                            TrainingId = 4
                        },
                        new
                        {
                            ExerciseId = 2,
                            TrainingId = 4
                        },
                        new
                        {
                            ExerciseId = 5,
                            TrainingId = 4
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.TrainingHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingHistory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainingId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainingId = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainingId = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainingId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2020, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainingId = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int?>("GoalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            GoalId = 2,
                            Name = "Admin Name",
                            PasswordHash = new byte[] { 110, 251, 54, 176, 130, 54, 246, 35, 251, 240, 183, 201, 227, 127, 92, 164, 149, 110, 135, 249, 244, 254, 176, 13, 209, 5, 219, 206, 255, 36, 41, 17, 208, 158, 181, 151, 158, 30, 141, 228, 108, 217, 137, 0, 152, 158, 147, 91, 154, 195, 185, 134, 251, 254, 234, 105, 203, 134, 21, 249, 217, 59, 185, 139 },
                            PasswordSalt = new byte[] { 34, 243, 144, 69, 135, 107, 22, 116, 177, 30, 24, 132, 167, 135, 136, 209, 77, 156, 7, 57, 98, 223, 114, 169, 6, 247, 165, 15, 100, 51, 57, 100, 44, 201, 162, 13, 119, 84, 163, 116, 61, 127, 181, 31, 3, 167, 211, 255, 174, 25, 16, 191, 182, 191, 158, 52, 45, 79, 191, 68, 212, 42, 240, 131, 239, 236, 220, 51, 1, 153, 28, 198, 26, 236, 35, 34, 17, 95, 224, 232, 100, 31, 240, 1, 1, 156, 52, 167, 27, 238, 98, 35, 246, 68, 155, 173, 44, 56, 231, 167, 102, 122, 219, 194, 40, 113, 196, 79, 236, 110, 209, 28, 115, 127, 152, 1, 67, 242, 86, 135, 54, 247, 193, 67, 42, 101, 169, 50 },
                            RoleId = 1,
                            Surname = "Admin Surname"
                        },
                        new
                        {
                            Id = 2,
                            Email = "moderator@gmail.com",
                            GoalId = 3,
                            Name = "Moderator Name",
                            PasswordHash = new byte[] { 110, 251, 54, 176, 130, 54, 246, 35, 251, 240, 183, 201, 227, 127, 92, 164, 149, 110, 135, 249, 244, 254, 176, 13, 209, 5, 219, 206, 255, 36, 41, 17, 208, 158, 181, 151, 158, 30, 141, 228, 108, 217, 137, 0, 152, 158, 147, 91, 154, 195, 185, 134, 251, 254, 234, 105, 203, 134, 21, 249, 217, 59, 185, 139 },
                            PasswordSalt = new byte[] { 34, 243, 144, 69, 135, 107, 22, 116, 177, 30, 24, 132, 167, 135, 136, 209, 77, 156, 7, 57, 98, 223, 114, 169, 6, 247, 165, 15, 100, 51, 57, 100, 44, 201, 162, 13, 119, 84, 163, 116, 61, 127, 181, 31, 3, 167, 211, 255, 174, 25, 16, 191, 182, 191, 158, 52, 45, 79, 191, 68, 212, 42, 240, 131, 239, 236, 220, 51, 1, 153, 28, 198, 26, 236, 35, 34, 17, 95, 224, 232, 100, 31, 240, 1, 1, 156, 52, 167, 27, 238, 98, 35, 246, 68, 155, 173, 44, 56, 231, 167, 102, 122, 219, 194, 40, 113, 196, 79, 236, 110, 209, 28, 115, 127, 152, 1, 67, 242, 86, 135, 54, 247, 193, 67, 42, 101, 169, 50 },
                            RoleId = 2,
                            Surname = "Moderator Surname"
                        },
                        new
                        {
                            Id = 3,
                            Email = "user@gmail.com",
                            GoalId = 1,
                            Name = "User Name",
                            PasswordHash = new byte[] { 110, 251, 54, 176, 130, 54, 246, 35, 251, 240, 183, 201, 227, 127, 92, 164, 149, 110, 135, 249, 244, 254, 176, 13, 209, 5, 219, 206, 255, 36, 41, 17, 208, 158, 181, 151, 158, 30, 141, 228, 108, 217, 137, 0, 152, 158, 147, 91, 154, 195, 185, 134, 251, 254, 234, 105, 203, 134, 21, 249, 217, 59, 185, 139 },
                            PasswordSalt = new byte[] { 34, 243, 144, 69, 135, 107, 22, 116, 177, 30, 24, 132, 167, 135, 136, 209, 77, 156, 7, 57, 98, 223, 114, 169, 6, 247, 165, 15, 100, 51, 57, 100, 44, 201, 162, 13, 119, 84, 163, 116, 61, 127, 181, 31, 3, 167, 211, 255, 174, 25, 16, 191, 182, 191, 158, 52, 45, 79, 191, 68, 212, 42, 240, 131, 239, 236, 220, 51, 1, 153, 28, 198, 26, 236, 35, 34, 17, 95, 224, 232, 100, 31, 240, 1, 1, 156, 52, 167, 27, 238, 98, 35, 246, 68, 155, 173, 44, 56, 231, 167, 102, 122, 219, 194, 40, 113, 196, 79, 236, 110, 209, 28, 115, 127, 152, 1, 67, 242, 86, 135, 54, 247, 193, 67, 42, 101, 169, 50 },
                            RoleId = 3,
                            Surname = "User Surname"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.UserTraining", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.Property<bool>("Favourite")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("UserTraining");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            TrainingId = 1,
                            Favourite = false
                        },
                        new
                        {
                            UserId = 1,
                            TrainingId = 2,
                            Favourite = false
                        },
                        new
                        {
                            UserId = 1,
                            TrainingId = 3,
                            Favourite = true
                        },
                        new
                        {
                            UserId = 2,
                            TrainingId = 3,
                            Favourite = false
                        },
                        new
                        {
                            UserId = 3,
                            TrainingId = 3,
                            Favourite = false
                        },
                        new
                        {
                            UserId = 3,
                            TrainingId = 4,
                            Favourite = true
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.Coach", b =>
                {
                    b.HasOne("FitnessTracker.Models.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("FitnessTracker.Models.Exercise", b =>
                {
                    b.HasOne("FitnessTracker.Models.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("FitnessTracker.Models.ExerciseHistory", b =>
                {
                    b.HasOne("FitnessTracker.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Models.User", null)
                        .WithMany("ExerciseHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("FitnessTracker.Models.ExerciseHistoryStats", b =>
                {
                    b.HasOne("FitnessTracker.Models.ExerciseHistory", null)
                        .WithMany("ExerciseHistoryStats")
                        .HasForeignKey("ExerciseHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitnessTracker.Models.RefreshToken", b =>
                {
                    b.HasOne("FitnessTracker.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessTracker.Models.TrainingExercise", b =>
                {
                    b.HasOne("FitnessTracker.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Models.Training", null)
                        .WithMany("TrainingExercises")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("FitnessTracker.Models.TrainingHistory", b =>
                {
                    b.HasOne("FitnessTracker.Models.Training", "Training")
                        .WithMany()
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Models.User", null)
                        .WithMany("TrainingHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Training");
                });

            modelBuilder.Entity("FitnessTracker.Models.User", b =>
                {
                    b.HasOne("FitnessTracker.Models.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId");

                    b.HasOne("FitnessTracker.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FitnessTracker.Models.UserTraining", b =>
                {
                    b.HasOne("FitnessTracker.Models.Training", "Training")
                        .WithMany()
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Models.User", null)
                        .WithMany("UserTraining")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Training");
                });

            modelBuilder.Entity("FitnessTracker.Models.ExerciseHistory", b =>
                {
                    b.Navigation("ExerciseHistoryStats");
                });

            modelBuilder.Entity("FitnessTracker.Models.Training", b =>
                {
                    b.Navigation("TrainingExercises");
                });

            modelBuilder.Entity("FitnessTracker.Models.User", b =>
                {
                    b.Navigation("ExerciseHistories");

                    b.Navigation("TrainingHistories");

                    b.Navigation("UserTraining");
                });
#pragma warning restore 612, 618
        }
    }
}
