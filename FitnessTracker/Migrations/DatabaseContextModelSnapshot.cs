// <auto-generated />
using System;
using FitnessTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FitnessTracker.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("FitnessTracker.Models.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.ToTable("Coach");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "coach_1@example.com",
                            GoalId = 1,
                            Name = "CoachName_1",
                            Phone = "123456789",
                            Surname = "CoachSurname_1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "coach_2@example.com",
                            GoalId = 2,
                            Name = "CoachName_2",
                            Phone = "987654321",
                            Surname = "CoachSurname_2"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Czas")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Dystans")
                        .HasColumnType("int");

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Obciazenie")
                        .HasColumnType("int");

                    b.Property<int?>("Powtorzenia")
                        .HasColumnType("int");

                    b.Property<int?>("Serie")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.ToTable("Exercise");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GoalId = 1,
                            Name = "Exercise_1",
                            Powtorzenia = 1,
                            Serie = 1
                        },
                        new
                        {
                            Id = 2,
                            GoalId = 2,
                            Name = "Exercise_2",
                            Powtorzenia = 2,
                            Serie = 2
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Goal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Redukcja tkanki tłuszczowej"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Przybranie masy mięśniowej"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rekompozycja sylwetki"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.History", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<int>("IdExercise")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.HasKey("IdUser", "IdExercise", "Date");

                    b.HasIndex("IdExercise");

                    b.ToTable("History");

                    b.HasData(
                        new
                        {
                            IdUser = 1,
                            IdExercise = 1,
                            Date = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IdUser = 1,
                            IdExercise = 2,
                            Date = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.HistoryStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Czas")
                        .HasColumnType("int");

                    b.Property<int?>("Dystans")
                        .HasColumnType("int");

                    b.Property<DateTime>("HistoryDate")
                        .HasColumnType("Date");

                    b.Property<int>("HistoryIdExercise")
                        .HasColumnType("int");

                    b.Property<int>("HistoryIdUser")
                        .HasColumnType("int");

                    b.Property<int?>("Obciazenie")
                        .HasColumnType("int");

                    b.Property<int?>("Powtorzenia")
                        .HasColumnType("int");

                    b.Property<int?>("Serie")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryIdUser", "HistoryIdExercise", "HistoryDate");

                    b.ToTable("HistoryStats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HistoryDate = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HistoryIdExercise = 1,
                            HistoryIdUser = 1,
                            Powtorzenia = 1,
                            Serie = 1
                        },
                        new
                        {
                            Id = 2,
                            HistoryDate = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HistoryIdExercise = 2,
                            HistoryIdUser = 1,
                            Powtorzenia = 2,
                            Serie = 2
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("FitnessTracker.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Training");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsPublic = true,
                            Name = "Trening_Publiczny_1"
                        },
                        new
                        {
                            Id = 2,
                            IsPublic = false,
                            Name = "Trening_Prywatny_1"
                        },
                        new
                        {
                            Id = 3,
                            IsPublic = false,
                            Name = "Trening_Prywatny_2"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.TrainingExercise", b =>
                {
                    b.Property<int>("IdExercise")
                        .HasColumnType("int");

                    b.Property<int>("IdTraining")
                        .HasColumnType("int");

                    b.HasKey("IdExercise", "IdTraining");

                    b.HasIndex("IdTraining");

                    b.ToTable("TrainingExercise");

                    b.HasData(
                        new
                        {
                            IdExercise = 1,
                            IdTraining = 1
                        },
                        new
                        {
                            IdExercise = 2,
                            IdTraining = 1
                        },
                        new
                        {
                            IdExercise = 1,
                            IdTraining = 2
                        },
                        new
                        {
                            IdExercise = 1,
                            IdTraining = 3
                        },
                        new
                        {
                            IdExercise = 2,
                            IdTraining = 3
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            GoalId = 2,
                            Name = "Admin Name",
                            PasswordHash = new byte[] { 103, 24, 114, 37, 67, 189, 179, 91, 187, 49, 247, 18, 246, 4, 158, 109, 222, 213, 22, 44, 99, 48, 204, 160, 107, 174, 15, 80, 184, 54, 181, 70, 163, 156, 42, 129, 40, 174, 143, 247, 182, 8, 144, 17, 169, 90, 25, 33, 74, 123, 49, 109, 64, 112, 184, 155, 236, 196, 61, 238, 178, 84, 96, 227 },
                            PasswordSalt = new byte[] { 58, 181, 238, 119, 192, 109, 143, 182, 44, 83, 15, 194, 190, 45, 102, 44, 195, 26, 123, 182, 25, 6, 76, 93, 184, 94, 86, 142, 30, 217, 11, 71, 245, 224, 28, 147, 148, 252, 90, 97, 83, 221, 98, 168, 216, 24, 124, 185, 157, 168, 223, 227, 8, 25, 114, 228, 232, 162, 180, 153, 178, 167, 150, 30, 109, 46, 36, 1, 242, 112, 70, 168, 22, 3, 51, 112, 249, 64, 201, 200, 95, 158, 237, 87, 91, 195, 59, 9, 65, 119, 31, 252, 146, 204, 246, 189, 83, 8, 79, 104, 255, 222, 11, 26, 110, 204, 61, 238, 194, 183, 1, 118, 82, 233, 193, 23, 156, 116, 77, 48, 196, 139, 64, 228, 198, 8, 233, 82 },
                            RoleId = 1,
                            Surname = "Admin Surname"
                        },
                        new
                        {
                            Id = 2,
                            Email = "moderator@gmail.com",
                            GoalId = 3,
                            Name = "Moderator Name",
                            PasswordHash = new byte[] { 103, 24, 114, 37, 67, 189, 179, 91, 187, 49, 247, 18, 246, 4, 158, 109, 222, 213, 22, 44, 99, 48, 204, 160, 107, 174, 15, 80, 184, 54, 181, 70, 163, 156, 42, 129, 40, 174, 143, 247, 182, 8, 144, 17, 169, 90, 25, 33, 74, 123, 49, 109, 64, 112, 184, 155, 236, 196, 61, 238, 178, 84, 96, 227 },
                            PasswordSalt = new byte[] { 58, 181, 238, 119, 192, 109, 143, 182, 44, 83, 15, 194, 190, 45, 102, 44, 195, 26, 123, 182, 25, 6, 76, 93, 184, 94, 86, 142, 30, 217, 11, 71, 245, 224, 28, 147, 148, 252, 90, 97, 83, 221, 98, 168, 216, 24, 124, 185, 157, 168, 223, 227, 8, 25, 114, 228, 232, 162, 180, 153, 178, 167, 150, 30, 109, 46, 36, 1, 242, 112, 70, 168, 22, 3, 51, 112, 249, 64, 201, 200, 95, 158, 237, 87, 91, 195, 59, 9, 65, 119, 31, 252, 146, 204, 246, 189, 83, 8, 79, 104, 255, 222, 11, 26, 110, 204, 61, 238, 194, 183, 1, 118, 82, 233, 193, 23, 156, 116, 77, 48, 196, 139, 64, 228, 198, 8, 233, 82 },
                            RoleId = 2,
                            Surname = "Moderator Surname"
                        },
                        new
                        {
                            Id = 3,
                            Email = "user@gmail.com",
                            GoalId = 1,
                            Name = "User Name",
                            PasswordHash = new byte[] { 103, 24, 114, 37, 67, 189, 179, 91, 187, 49, 247, 18, 246, 4, 158, 109, 222, 213, 22, 44, 99, 48, 204, 160, 107, 174, 15, 80, 184, 54, 181, 70, 163, 156, 42, 129, 40, 174, 143, 247, 182, 8, 144, 17, 169, 90, 25, 33, 74, 123, 49, 109, 64, 112, 184, 155, 236, 196, 61, 238, 178, 84, 96, 227 },
                            PasswordSalt = new byte[] { 58, 181, 238, 119, 192, 109, 143, 182, 44, 83, 15, 194, 190, 45, 102, 44, 195, 26, 123, 182, 25, 6, 76, 93, 184, 94, 86, 142, 30, 217, 11, 71, 245, 224, 28, 147, 148, 252, 90, 97, 83, 221, 98, 168, 216, 24, 124, 185, 157, 168, 223, 227, 8, 25, 114, 228, 232, 162, 180, 153, 178, 167, 150, 30, 109, 46, 36, 1, 242, 112, 70, 168, 22, 3, 51, 112, 249, 64, 201, 200, 95, 158, 237, 87, 91, 195, 59, 9, 65, 119, 31, 252, 146, 204, 246, 189, 83, 8, 79, 104, 255, 222, 11, 26, 110, 204, 61, 238, 194, 183, 1, 118, 82, 233, 193, 23, 156, 116, 77, 48, 196, 139, 64, 228, 198, 8, 233, 82 },
                            RoleId = 3,
                            Surname = "User Surname"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.UserTraining", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<int>("IdTraining")
                        .HasColumnType("int");

                    b.Property<bool>("Favourite")
                        .HasColumnType("bit");

                    b.HasKey("IdUser", "IdTraining");

                    b.HasIndex("IdTraining");

                    b.ToTable("UserTraining");

                    b.HasData(
                        new
                        {
                            IdUser = 1,
                            IdTraining = 1,
                            Favourite = false
                        },
                        new
                        {
                            IdUser = 1,
                            IdTraining = 2,
                            Favourite = false
                        },
                        new
                        {
                            IdUser = 1,
                            IdTraining = 3,
                            Favourite = true
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.Coach", b =>
                {
                    b.HasOne("FitnessTracker.Models.Goal", "Goal")
                        .WithMany("Coaches")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("FitnessTracker.Models.Exercise", b =>
                {
                    b.HasOne("FitnessTracker.Models.Goal", "Goal")
                        .WithMany("Exercises")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("FitnessTracker.Models.History", b =>
                {
                    b.HasOne("FitnessTracker.Models.Exercise", "Exercise")
                        .WithMany("Histories")
                        .HasForeignKey("IdExercise")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Models.User", "User")
                        .WithMany("Histories")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessTracker.Models.HistoryStats", b =>
                {
                    b.HasOne("FitnessTracker.Models.History", "History")
                        .WithMany("HistoryStats")
                        .HasForeignKey("HistoryIdUser", "HistoryIdExercise", "HistoryDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");
                });

            modelBuilder.Entity("FitnessTracker.Models.RefreshToken", b =>
                {
                    b.HasOne("FitnessTracker.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessTracker.Models.TrainingExercise", b =>
                {
                    b.HasOne("FitnessTracker.Models.Exercise", "Exercise")
                        .WithMany("TrainingExercises")
                        .HasForeignKey("IdExercise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Models.Training", "Training")
                        .WithMany("TrainingExercises")
                        .HasForeignKey("IdTraining")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("FitnessTracker.Models.User", b =>
                {
                    b.HasOne("FitnessTracker.Models.Goal", "Goal")
                        .WithMany("Users")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FitnessTracker.Models.UserTraining", b =>
                {
                    b.HasOne("FitnessTracker.Models.Training", "Training")
                        .WithMany("UserTrainings")
                        .HasForeignKey("IdTraining")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Models.User", "User")
                        .WithMany("Trainings")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Training");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessTracker.Models.Exercise", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("TrainingExercises");
                });

            modelBuilder.Entity("FitnessTracker.Models.Goal", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("Exercises");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FitnessTracker.Models.History", b =>
                {
                    b.Navigation("HistoryStats");
                });

            modelBuilder.Entity("FitnessTracker.Models.Training", b =>
                {
                    b.Navigation("TrainingExercises");

                    b.Navigation("UserTrainings");
                });

            modelBuilder.Entity("FitnessTracker.Models.User", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("Trainings");
                });
#pragma warning restore 612, 618
        }
    }
}
