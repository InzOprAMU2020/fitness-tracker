// <auto-generated />
using System;
using FitnessTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FitnessTracker.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("FitnessTracker.Models.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("FitnessTracker.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            Name = "Admin Name",
                            PasswordHash = new byte[] { 119, 201, 92, 34, 22, 132, 18, 36, 89, 162, 165, 179, 88, 31, 10, 46, 128, 6, 30, 210, 88, 195, 148, 233, 73, 165, 1, 79, 190, 214, 99, 211, 35, 72, 178, 83, 191, 235, 171, 16, 44, 65, 222, 41, 98, 55, 249, 136, 174, 92, 52, 151, 202, 217, 93, 15, 16, 163, 72, 197, 111, 110, 96, 140 },
                            PasswordSalt = new byte[] { 125, 130, 5, 238, 229, 63, 48, 65, 142, 85, 232, 205, 252, 73, 86, 107, 178, 221, 38, 42, 201, 100, 247, 40, 204, 30, 5, 179, 172, 100, 89, 30, 223, 237, 107, 238, 88, 38, 169, 169, 65, 119, 23, 157, 209, 246, 6, 185, 63, 103, 29, 113, 216, 235, 40, 34, 152, 217, 144, 145, 105, 222, 186, 176, 50, 97, 161, 54, 245, 121, 71, 143, 105, 73, 232, 103, 121, 133, 188, 106, 40, 96, 74, 245, 32, 240, 183, 228, 9, 109, 150, 205, 7, 188, 213, 177, 195, 225, 180, 181, 28, 31, 82, 142, 107, 230, 205, 42, 233, 47, 234, 119, 232, 144, 66, 83, 153, 12, 81, 19, 7, 62, 98, 213, 188, 191, 112, 77 },
                            RoleId = 1,
                            Surname = "Admin Surname"
                        },
                        new
                        {
                            Id = 2,
                            Email = "moderator@gmail.com",
                            Name = "Moderator Name",
                            PasswordHash = new byte[] { 119, 201, 92, 34, 22, 132, 18, 36, 89, 162, 165, 179, 88, 31, 10, 46, 128, 6, 30, 210, 88, 195, 148, 233, 73, 165, 1, 79, 190, 214, 99, 211, 35, 72, 178, 83, 191, 235, 171, 16, 44, 65, 222, 41, 98, 55, 249, 136, 174, 92, 52, 151, 202, 217, 93, 15, 16, 163, 72, 197, 111, 110, 96, 140 },
                            PasswordSalt = new byte[] { 125, 130, 5, 238, 229, 63, 48, 65, 142, 85, 232, 205, 252, 73, 86, 107, 178, 221, 38, 42, 201, 100, 247, 40, 204, 30, 5, 179, 172, 100, 89, 30, 223, 237, 107, 238, 88, 38, 169, 169, 65, 119, 23, 157, 209, 246, 6, 185, 63, 103, 29, 113, 216, 235, 40, 34, 152, 217, 144, 145, 105, 222, 186, 176, 50, 97, 161, 54, 245, 121, 71, 143, 105, 73, 232, 103, 121, 133, 188, 106, 40, 96, 74, 245, 32, 240, 183, 228, 9, 109, 150, 205, 7, 188, 213, 177, 195, 225, 180, 181, 28, 31, 82, 142, 107, 230, 205, 42, 233, 47, 234, 119, 232, 144, 66, 83, 153, 12, 81, 19, 7, 62, 98, 213, 188, 191, 112, 77 },
                            RoleId = 2,
                            Surname = "Moderator Surname"
                        },
                        new
                        {
                            Id = 3,
                            Email = "user@gmail.com",
                            Name = "User Name",
                            PasswordHash = new byte[] { 119, 201, 92, 34, 22, 132, 18, 36, 89, 162, 165, 179, 88, 31, 10, 46, 128, 6, 30, 210, 88, 195, 148, 233, 73, 165, 1, 79, 190, 214, 99, 211, 35, 72, 178, 83, 191, 235, 171, 16, 44, 65, 222, 41, 98, 55, 249, 136, 174, 92, 52, 151, 202, 217, 93, 15, 16, 163, 72, 197, 111, 110, 96, 140 },
                            PasswordSalt = new byte[] { 125, 130, 5, 238, 229, 63, 48, 65, 142, 85, 232, 205, 252, 73, 86, 107, 178, 221, 38, 42, 201, 100, 247, 40, 204, 30, 5, 179, 172, 100, 89, 30, 223, 237, 107, 238, 88, 38, 169, 169, 65, 119, 23, 157, 209, 246, 6, 185, 63, 103, 29, 113, 216, 235, 40, 34, 152, 217, 144, 145, 105, 222, 186, 176, 50, 97, 161, 54, 245, 121, 71, 143, 105, 73, 232, 103, 121, 133, 188, 106, 40, 96, 74, 245, 32, 240, 183, 228, 9, 109, 150, 205, 7, 188, 213, 177, 195, 225, 180, 181, 28, 31, 82, 142, 107, 230, 205, 42, 233, 47, 234, 119, 232, 144, 66, 83, 153, 12, 81, 19, 7, 62, 98, 213, 188, 191, 112, 77 },
                            RoleId = 3,
                            Surname = "User Surname"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.RefreshToken", b =>
                {
                    b.HasOne("FitnessTracker.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessTracker.Models.User", b =>
                {
                    b.HasOne("FitnessTracker.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
