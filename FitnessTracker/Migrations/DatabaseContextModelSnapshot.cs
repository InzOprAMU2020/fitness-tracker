// <auto-generated />
using System;
using FitnessTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FitnessTracker.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("FitnessTracker.Models.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GoalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.ToTable("Coach");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "coach_1@example.com",
                            GoalId = 1,
                            Name = "CoachName_1",
                            Phone = "123456789",
                            Surname = "CoachSurname_1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "coach_2@example.com",
                            GoalId = 2,
                            Name = "CoachName_2",
                            Phone = "987654321",
                            Surname = "CoachSurname_2"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Czas")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Dystans")
                        .HasColumnType("int");

                    b.Property<int?>("GoalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Obciazenie")
                        .HasColumnType("int");

                    b.Property<int?>("Powtorzenia")
                        .HasColumnType("int");

                    b.Property<int?>("Serie")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("TrainingId");

                    b.ToTable("Exercise");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GoalId = 1,
                            Name = "Exercise_1",
                            Powtorzenia = 1,
                            Serie = 1
                        },
                        new
                        {
                            Id = 2,
                            GoalId = 2,
                            Name = "Exercise_2",
                            Powtorzenia = 2,
                            Serie = 2
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Goal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Redukcja tkanki tłuszczowej"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Przybranie masy mięśniowej"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rekompozycja sylwetki"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ExerciseId", "UserId", "Date")
                        .IsUnique();

                    b.ToTable("History");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExerciseId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExerciseId = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.HistoryStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Czas")
                        .HasColumnType("int");

                    b.Property<int?>("Dystans")
                        .HasColumnType("int");

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("Obciazenie")
                        .HasColumnType("int");

                    b.Property<int?>("Powtorzenia")
                        .HasColumnType("int");

                    b.Property<int?>("Serie")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("HistoryStats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HistoryId = 1,
                            Powtorzenia = 1,
                            Serie = 1
                        },
                        new
                        {
                            Id = 2,
                            HistoryId = 2,
                            Powtorzenia = 2,
                            Serie = 2
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("FitnessTracker.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Training");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsPublic = true,
                            Name = "Trening_Publiczny_1"
                        },
                        new
                        {
                            Id = 2,
                            IsPublic = false,
                            Name = "Trening_Prywatny_1"
                        },
                        new
                        {
                            Id = 3,
                            IsPublic = false,
                            Name = "Trening_Prywatny_2"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.TrainingExercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseId", "TrainingId");

                    b.ToTable("TrainingExercise");

                    b.HasData(
                        new
                        {
                            ExerciseId = 1,
                            TrainingId = 1
                        },
                        new
                        {
                            ExerciseId = 2,
                            TrainingId = 1
                        },
                        new
                        {
                            ExerciseId = 1,
                            TrainingId = 2
                        },
                        new
                        {
                            ExerciseId = 1,
                            TrainingId = 3
                        },
                        new
                        {
                            ExerciseId = 2,
                            TrainingId = 3
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int?>("GoalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            GoalId = 2,
                            Name = "Admin Name",
                            PasswordHash = new byte[] { 78, 138, 209, 211, 50, 25, 227, 29, 162, 179, 171, 150, 253, 102, 22, 149, 199, 113, 208, 12, 236, 211, 190, 105, 211, 186, 218, 160, 245, 231, 2, 247, 241, 132, 115, 214, 202, 179, 87, 172, 182, 255, 126, 40, 201, 12, 158, 208, 88, 16, 77, 85, 80, 74, 162, 181, 40, 219, 62, 189, 16, 65, 30, 47 },
                            PasswordSalt = new byte[] { 78, 79, 227, 106, 202, 225, 25, 219, 39, 125, 13, 154, 17, 87, 251, 120, 36, 52, 175, 105, 188, 7, 186, 193, 180, 198, 248, 51, 6, 175, 45, 99, 148, 215, 164, 218, 158, 219, 71, 245, 180, 107, 225, 18, 232, 90, 100, 113, 92, 194, 127, 126, 202, 74, 196, 187, 113, 178, 239, 239, 254, 252, 84, 34, 161, 254, 81, 213, 223, 0, 50, 21, 20, 130, 216, 134, 7, 195, 145, 123, 136, 51, 13, 102, 14, 113, 95, 127, 108, 31, 90, 105, 59, 45, 212, 72, 17, 122, 23, 181, 94, 61, 214, 67, 139, 180, 169, 181, 12, 72, 113, 3, 91, 241, 114, 223, 130, 245, 80, 84, 147, 68, 52, 43, 205, 42, 10, 205 },
                            RoleId = 1,
                            Surname = "Admin Surname"
                        },
                        new
                        {
                            Id = 2,
                            Email = "moderator@gmail.com",
                            GoalId = 3,
                            Name = "Moderator Name",
                            PasswordHash = new byte[] { 78, 138, 209, 211, 50, 25, 227, 29, 162, 179, 171, 150, 253, 102, 22, 149, 199, 113, 208, 12, 236, 211, 190, 105, 211, 186, 218, 160, 245, 231, 2, 247, 241, 132, 115, 214, 202, 179, 87, 172, 182, 255, 126, 40, 201, 12, 158, 208, 88, 16, 77, 85, 80, 74, 162, 181, 40, 219, 62, 189, 16, 65, 30, 47 },
                            PasswordSalt = new byte[] { 78, 79, 227, 106, 202, 225, 25, 219, 39, 125, 13, 154, 17, 87, 251, 120, 36, 52, 175, 105, 188, 7, 186, 193, 180, 198, 248, 51, 6, 175, 45, 99, 148, 215, 164, 218, 158, 219, 71, 245, 180, 107, 225, 18, 232, 90, 100, 113, 92, 194, 127, 126, 202, 74, 196, 187, 113, 178, 239, 239, 254, 252, 84, 34, 161, 254, 81, 213, 223, 0, 50, 21, 20, 130, 216, 134, 7, 195, 145, 123, 136, 51, 13, 102, 14, 113, 95, 127, 108, 31, 90, 105, 59, 45, 212, 72, 17, 122, 23, 181, 94, 61, 214, 67, 139, 180, 169, 181, 12, 72, 113, 3, 91, 241, 114, 223, 130, 245, 80, 84, 147, 68, 52, 43, 205, 42, 10, 205 },
                            RoleId = 2,
                            Surname = "Moderator Surname"
                        },
                        new
                        {
                            Id = 3,
                            Email = "user@gmail.com",
                            GoalId = 1,
                            Name = "User Name",
                            PasswordHash = new byte[] { 78, 138, 209, 211, 50, 25, 227, 29, 162, 179, 171, 150, 253, 102, 22, 149, 199, 113, 208, 12, 236, 211, 190, 105, 211, 186, 218, 160, 245, 231, 2, 247, 241, 132, 115, 214, 202, 179, 87, 172, 182, 255, 126, 40, 201, 12, 158, 208, 88, 16, 77, 85, 80, 74, 162, 181, 40, 219, 62, 189, 16, 65, 30, 47 },
                            PasswordSalt = new byte[] { 78, 79, 227, 106, 202, 225, 25, 219, 39, 125, 13, 154, 17, 87, 251, 120, 36, 52, 175, 105, 188, 7, 186, 193, 180, 198, 248, 51, 6, 175, 45, 99, 148, 215, 164, 218, 158, 219, 71, 245, 180, 107, 225, 18, 232, 90, 100, 113, 92, 194, 127, 126, 202, 74, 196, 187, 113, 178, 239, 239, 254, 252, 84, 34, 161, 254, 81, 213, 223, 0, 50, 21, 20, 130, 216, 134, 7, 195, 145, 123, 136, 51, 13, 102, 14, 113, 95, 127, 108, 31, 90, 105, 59, 45, 212, 72, 17, 122, 23, 181, 94, 61, 214, 67, 139, 180, 169, 181, 12, 72, 113, 3, 91, 241, 114, 223, 130, 245, 80, 84, 147, 68, 52, 43, 205, 42, 10, 205 },
                            RoleId = 3,
                            Surname = "User Surname"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.UserTraining", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.Property<bool>("Favourite")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("UserTraining");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            TrainingId = 1,
                            Favourite = false
                        },
                        new
                        {
                            UserId = 1,
                            TrainingId = 2,
                            Favourite = false
                        },
                        new
                        {
                            UserId = 1,
                            TrainingId = 3,
                            Favourite = true
                        });
                });

            modelBuilder.Entity("FitnessTracker.Models.Coach", b =>
                {
                    b.HasOne("FitnessTracker.Models.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("FitnessTracker.Models.Exercise", b =>
                {
                    b.HasOne("FitnessTracker.Models.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId");

                    b.HasOne("FitnessTracker.Models.Training", null)
                        .WithMany("Exercises")
                        .HasForeignKey("TrainingId");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("FitnessTracker.Models.History", b =>
                {
                    b.HasOne("FitnessTracker.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Models.User", null)
                        .WithMany("History")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("FitnessTracker.Models.HistoryStats", b =>
                {
                    b.HasOne("FitnessTracker.Models.History", null)
                        .WithMany("HistoryStats")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitnessTracker.Models.RefreshToken", b =>
                {
                    b.HasOne("FitnessTracker.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessTracker.Models.TrainingExercise", b =>
                {
                    b.HasOne("FitnessTracker.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("FitnessTracker.Models.User", b =>
                {
                    b.HasOne("FitnessTracker.Models.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId");

                    b.HasOne("FitnessTracker.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FitnessTracker.Models.UserTraining", b =>
                {
                    b.HasOne("FitnessTracker.Models.Training", "Training")
                        .WithMany()
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Models.User", null)
                        .WithMany("UserTraining")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Training");
                });

            modelBuilder.Entity("FitnessTracker.Models.History", b =>
                {
                    b.Navigation("HistoryStats");
                });

            modelBuilder.Entity("FitnessTracker.Models.Training", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("FitnessTracker.Models.User", b =>
                {
                    b.Navigation("History");

                    b.Navigation("UserTraining");
                });
#pragma warning restore 612, 618
        }
    }
}
